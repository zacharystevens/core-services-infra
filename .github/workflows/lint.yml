name: Lint and Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  TF_VERSION: "1.5.0"
  TFLINT_VERSION: "v0.44.1"
  CHECKOV_VERSION: "2.3.0"
  TRIVY_VERSION: "0.42.1"

jobs:
  terraform-lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup TFLint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install.sh | bash
        sudo mv tflint /usr/local/bin/
        
    - name: TFLint Init
      run: |
        cd bootstrap
        tflint --init
        cd ..
        
    - name: TFLint Check
      run: |
        echo "Checking bootstrap..."
        cd bootstrap
        tflint
        cd ..
        
        echo "Checking modules..."
        for dir in modules/*/; do
          if [ -f "$dir/main.tf" ]; then
            echo "Checking $dir"
            cd "$dir"
            tflint --init
            tflint
            cd ../..
          fi
        done
        
    - name: Terraform Validate
      run: |
        echo "Validating bootstrap..."
        cd bootstrap
        terraform init -backend=false
        terraform validate
        cd ..
        
        echo "Validating main..."
        terraform init -backend=false
        terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: json
        output_file_path: checkov-results.json
        
    - name: Upload Checkov results
      uses: actions/upload-artifact@v3
      with:
        name: checkov-results
        path: checkov-results.json
        
    - name: Setup Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-results
        path: trivy-results.sarif

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install yamllint
      run: |
        python -m pip install --upgrade pip
        pip install yamllint
        
    - name: YAML Lint
      run: |
        yamllint -c .yamllint .
        
    - name: Create .yamllint config if missing
      run: |
        if [ ! -f .yamllint ]; then
          cat > .yamllint << EOF
        extends: default
        rules:
          line-length:
            max: 120
          document-start: disable
          trailing-spaces: enable
          indentation:
            spaces: 2
            indent-sequences: true
        EOF
        fi

  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible and ansible-lint
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint
        
    - name: Ansible Lint
      run: |
        find . -name "*.yml" -o -name "*.yaml" | grep -v ".github" | xargs -I {} sh -c 'if grep -q "hosts:" "{}"; then echo "Linting {}"; ansible-lint "{}"; fi' || true

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'
        
    - name: Generate SBOM
      run: |
        trivy fs --format cyclonedx --output sbom.json .
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.json

  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t test-image:latest .
        
    - name: Scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test-image:latest'
        format: 'sarif'
        output: 'container-scan-results.sarif'
        
    - name: Upload container scan results
      uses: actions/upload-artifact@v3
      with:
        name: container-scan-results
        path: container-scan-results.sarif

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install compliance tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Python Security Scan (Bandit)
      run: |
        find . -name "*.py" | xargs bandit -r . || true
        
    - name: Python Dependency Check (Safety)
      run: |
        safety check || true
        
    - name: Check for secrets
      run: |
        git secrets --scan || true
        
    - name: Check for hardcoded credentials
      run: |
        grep -r "AKIA[0-9A-Z]{16}\|sk_live_[a-zA-Z0-9]{24}\|pk_live_[a-zA-Z0-9]{24}" . || true
        grep -r "password.*=.*['\"][^'\"]*['\"]" . || true
        grep -r "secret.*=.*['\"][^'\"]*['\"]" . || true
